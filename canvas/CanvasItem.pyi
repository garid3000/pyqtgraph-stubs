from ..Qt import QtCore
from ..graphicsItems.ROI import ROI
from _typeshed import Incomplete

__all__ = ['CanvasItem', 'GroupCanvasItem']

class SelectBox(ROI):
    def __init__(self, scalable: bool = False, rotatable: bool = True) -> None: ...

class CanvasItem(QtCore.QObject):
    sigResetUserTransform: Incomplete
    sigTransformChangeFinished: Incomplete
    sigTransformChanged: Incomplete
    sigVisibilityChanged: Incomplete
    transformCopyBuffer: Incomplete
    opts: Incomplete
    selectedAlone: bool
    canvas: Incomplete
    ctrl: Incomplete
    layout: Incomplete
    alphaLabel: Incomplete
    alphaSlider: Incomplete
    resetTransformBtn: Incomplete
    copyBtn: Incomplete
    pasteBtn: Incomplete
    transformWidget: Incomplete
    transformGui: Incomplete
    baseTransform: Incomplete
    selectBox: Incomplete
    itemRotation: Incomplete
    itemScale: Incomplete
    tempTransform: Incomplete
    userTransform: Incomplete
    def __init__(self, item, **opts) -> None: ...
    def setMovable(self, m) -> None: ...
    def setCanvas(self, canvas) -> None: ...
    def graphicsItem(self):
        """Return the graphicsItem for this canvasItem."""
    def parentItem(self): ...
    def setParentItem(self, parent) -> None: ...
    def copyClicked(self) -> None: ...
    def pasteClicked(self) -> None: ...
    def mirrorY(self) -> None: ...
    def mirrorXY(self) -> None: ...
    def hasUserTransform(self): ...
    def ctrlWidget(self): ...
    def alphaChanged(self, val) -> None: ...
    def setAlpha(self, alpha) -> None: ...
    def alpha(self): ...
    def isMovable(self): ...
    def selectBoxMoved(self) -> None:
        """The selection box has moved; get its transformation information and pass to the graphics item"""
    def scale(self, x, y) -> None: ...
    def rotate(self, ang) -> None: ...
    def translate(self, x, y) -> None: ...
    def setTranslate(self, x, y) -> None: ...
    def setRotate(self, angle) -> None: ...
    def setScale(self, x, y) -> None: ...
    def setTemporaryTransform(self, transform) -> None: ...
    def applyTemporaryTransform(self) -> None:
        """Collapses tempTransform into UserTransform, resets tempTransform"""
    def resetTemporaryTransform(self) -> None: ...
    def transform(self): ...
    def updateTransform(self):
        """Regenerate the item position from the base, user, and temp transforms"""
    def displayTransform(self, transform) -> None:
        """Updates transform numbers in the ctrl widget."""
    def resetUserTransform(self) -> None: ...
    def resetTransformClicked(self) -> None: ...
    def restoreTransform(self, tr) -> None: ...
    def saveTransform(self):
        """Return a dict containing the current user transform"""
    def selectBoxFromUser(self) -> None:
        """Move the selection box to match the current userTransform"""
    itemRect: Incomplete
    selectBoxBase: Incomplete
    def selectBoxToItem(self) -> None:
        """Move/scale the selection box so it fits the item's bounding rect. (assumes item is not rotated)"""
    def zValue(self): ...
    def setZValue(self, z) -> None: ...
    def selectionChanged(self, sel, multi) -> None:
        """
        Inform the item that its selection state has changed. 
        ============== =========================================================
        **Arguments:**
        sel            (bool) whether the item is currently selected
        multi          (bool) whether there are multiple items currently 
                       selected
        ============== =========================================================
        """
    def showSelectBox(self) -> None:
        """Display the selection box around this item if it is selected and movable"""
    def hideSelectBox(self) -> None: ...
    def selectBoxChanged(self) -> None: ...
    def selectBoxChangeFinished(self) -> None: ...
    def alphaPressed(self) -> None:
        """Hide selection box while slider is moving"""
    def alphaReleased(self) -> None: ...
    def show(self) -> None: ...
    def hide(self) -> None: ...
    def setVisible(self, vis) -> None: ...
    def isVisible(self): ...
    def saveState(self): ...
    def restoreState(self, state) -> None: ...

class GroupCanvasItem(CanvasItem):
    """
    Canvas item used for grouping others
    """
    def __init__(self, **opts) -> None: ...
