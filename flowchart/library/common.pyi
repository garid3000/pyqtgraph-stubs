from ..Node import Node
from _typeshed import Incomplete

__all__ = ['CtrlNode', 'PlottingCtrlNode', 'metaArrayWrapper']

class CtrlNode(Node):
    """Abstract class for nodes with auto-generated control UI"""
    sigStateChanged: Incomplete
    def __init__(self, name, ui: Incomplete | None = None, terminals: Incomplete | None = None) -> None: ...
    def ctrlWidget(self): ...
    def changed(self) -> None: ...
    def process(self, In, display: bool = True): ...
    def saveState(self): ...
    def restoreState(self, state) -> None: ...
    def hideRow(self, name) -> None: ...
    def showRow(self, name) -> None: ...

class PlottingCtrlNode(CtrlNode):
    """Abstract class for CtrlNodes that can connect to plots."""
    plotTerminal: Incomplete
    def __init__(self, name, ui: Incomplete | None = None, terminals: Incomplete | None = None) -> None: ...
    def connected(self, term, remote) -> None: ...
    def disconnected(self, term, remote) -> None: ...
    def connectToPlot(self, node) -> None:
        """Define what happens when the node is connected to a plot"""
    def disconnectFromPlot(self, plot) -> None:
        """Define what happens when the node is disconnected from a plot"""
    def process(self, In, display: bool = True): ...

def metaArrayWrapper(fn): ...
