from . import functions as functions
from ...Qt import QtCore as QtCore, QtWidgets as QtWidgets
from ...graphicsItems.LinearRegionItem import LinearRegionItem as LinearRegionItem
from ...widgets.TreeWidget import TreeWidget as TreeWidget
from ..Node import Node as Node
from .common import CtrlNode as CtrlNode
from _typeshed import Incomplete

class ColumnSelectNode(Node):
    """Select named columns from a record array or MetaArray."""
    nodeName: str
    columns: Incomplete
    columnList: Incomplete
    axis: int
    def __init__(self, name) -> None: ...
    def process(self, In, display: bool = True): ...
    def ctrlWidget(self): ...
    def updateList(self, data) -> None: ...
    def itemChanged(self, item) -> None: ...
    def saveState(self): ...
    def restoreState(self, state) -> None: ...

class RegionSelectNode(CtrlNode):
    """Returns a slice from a 1-D array. Connect the 'widget' output to a plot to display a region-selection widget."""
    nodeName: str
    uiTemplate: Incomplete
    items: Incomplete
    def __init__(self, name) -> None: ...
    def displayToggled(self, b) -> None: ...
    def movableToggled(self, b) -> None: ...
    def process(self, data: Incomplete | None = None, display: bool = True): ...
    def rgnChanged(self, item) -> None: ...

class TextEdit(QtWidgets.QTextEdit):
    on_update: Incomplete
    lastText: Incomplete
    def __init__(self, on_update) -> None: ...
    def focusOutEvent(self, ev) -> None: ...

class EvalNode(Node):
    """Return the output of a string evaluated/executed by the python interpreter.
    The string may be either an expression or a python script, and inputs are accessed as the name of the terminal. 
    For expressions, a single value may be evaluated for a single output, or a dict for multiple outputs.
    For a script, the text will be executed as the body of a function."""
    nodeName: str
    ui: Incomplete
    layout: Incomplete
    text: Incomplete
    def __init__(self, name) -> None: ...
    def ctrlWidget(self): ...
    def setCode(self, code) -> None: ...
    def code(self): ...
    def process(self, display: bool = True, **args): ...
    def saveState(self): ...
    def restoreState(self, state) -> None: ...

class ColumnJoinNode(Node):
    """Concatenates record arrays and/or adds new columns"""
    nodeName: str
    ui: Incomplete
    layout: Incomplete
    tree: Incomplete
    addInBtn: Incomplete
    remInBtn: Incomplete
    def __init__(self, name) -> None: ...
    def ctrlWidget(self): ...
    def addInput(self) -> None: ...
    def remInput(self) -> None: ...
    def process(self, display: bool = True, **args): ...
    def order(self): ...
    def saveState(self): ...
    def restoreState(self, state) -> None: ...
    def terminalRenamed(self, term, oldName) -> None: ...

class Mean(CtrlNode):
    """Calculate the mean of an array across an axis.
    """
    nodeName: str
    uiTemplate: Incomplete
    def processData(self, data): ...

class Max(CtrlNode):
    """Calculate the maximum of an array across an axis.
    """
    nodeName: str
    uiTemplate: Incomplete
    def processData(self, data): ...

class Min(CtrlNode):
    """Calculate the minimum of an array across an axis.
    """
    nodeName: str
    uiTemplate: Incomplete
    def processData(self, data): ...

class Stdev(CtrlNode):
    """Calculate the standard deviation of an array across an axis.
    """
    nodeName: str
    uiTemplate: Incomplete
    def processData(self, data): ...

class Index(CtrlNode):
    """Select an index from an array axis.
    """
    nodeName: str
    uiTemplate: Incomplete
    def processData(self, data): ...

class Slice(CtrlNode):
    """Select a slice from an array axis.
    """
    nodeName: str
    uiTemplate: Incomplete
    def processData(self, data): ...

class AsType(CtrlNode):
    """Convert an array to a different dtype.
    """
    nodeName: str
    uiTemplate: Incomplete
    def processData(self, data): ...
