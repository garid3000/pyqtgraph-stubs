from ... import ComboBox as ComboBox, PlotDataItem as PlotDataItem
from ...Qt import QtCore as QtCore, QtGui as QtGui, QtWidgets as QtWidgets
from ...graphicsItems.ScatterPlotItem import ScatterPlotItem as ScatterPlotItem
from ..Node import Node as Node
from .common import CtrlNode as CtrlNode
from _typeshed import Incomplete

class PlotWidgetNode(Node):
    """Connection to PlotWidget. Will plot arrays, metaarrays, and display event lists."""
    nodeName: str
    sigPlotChanged: Incomplete
    plot: Incomplete
    plots: Incomplete
    ui: Incomplete
    items: Incomplete
    def __init__(self, name) -> None: ...
    def disconnected(self, localTerm, remoteTerm) -> None: ...
    def setPlot(self, plot) -> None: ...
    def getPlot(self): ...
    def process(self, In, display: bool = True) -> None: ...
    def processBypassed(self, args) -> None: ...
    def ctrlWidget(self): ...
    def plotSelected(self, index) -> None: ...
    def setPlotList(self, plots) -> None:
        """
        Specify the set of plots (PlotWidget or PlotItem) that the user may
        select from.
        
        *plots* must be a dictionary of {name: plot} pairs.
        """
    def updateUi(self) -> None: ...

class CanvasNode(Node):
    """Connection to a Canvas widget."""
    nodeName: str
    canvas: Incomplete
    items: Incomplete
    def __init__(self, name) -> None: ...
    def disconnected(self, localTerm, remoteTerm) -> None: ...
    def setCanvas(self, canvas) -> None: ...
    def getCanvas(self): ...
    def process(self, In, display: bool = True) -> None: ...

class PlotCurve(CtrlNode):
    """Generates a plot curve from x/y data"""
    nodeName: str
    uiTemplate: Incomplete
    item: Incomplete
    def __init__(self, name) -> None: ...
    def process(self, x, y, display: bool = True): ...

class ScatterPlot(CtrlNode):
    """Generates a scatter plot from a record array or nested dicts"""
    nodeName: str
    uiTemplate: Incomplete
    item: Incomplete
    keys: Incomplete
    def __init__(self, name) -> None: ...
    def process(self, input, display: bool = True): ...
    def updateKeys(self, data) -> None: ...
    def saveState(self): ...
    def restoreState(self, state) -> None: ...
