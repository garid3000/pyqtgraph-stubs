from ..Qt import QtWidgets
from _typeshed import Incomplete

__all__ = ['TreeWidget', 'TreeWidgetItem']

class TreeWidget(QtWidgets.QTreeWidget):
    """Extends QTreeWidget to allow internal drag/drop with widgets in the tree.
    Also maintains the expanded state of subtrees as they are moved.
    This class demonstrates the absurd lengths one must go to to make drag/drop work."""
    sigItemMoved: Incomplete
    sigItemCheckStateChanged: Incomplete
    sigItemTextChanged: Incomplete
    sigColumnCountChanged: Incomplete
    placeholders: Incomplete
    childNestingLimit: Incomplete
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    def setItemWidget(self, item, col, wid) -> None:
        """
        Overrides QTreeWidget.setItemWidget such that widgets are added inside an invisible wrapper widget.
        This makes it possible to move the item in and out of the tree without its widgets being automatically deleted.
        """
    def itemWidget(self, item, col): ...
    def dropMimeData(self, parent, index, data, action): ...
    def itemMoving(self, item, parent, index):
        """Called when item has been dropped elsewhere in the tree.
        Return True to accept the move, False to reject."""
    def prepareMove(self, item) -> None: ...
    def recoverMove(self, item) -> None: ...
    def collapseTree(self, item) -> None: ...
    def removeTopLevelItem(self, item) -> None: ...
    def listAllItems(self, item: Incomplete | None = None): ...
    def dropEvent(self, ev) -> None: ...
    def updateDropFlags(self) -> None: ...
    @staticmethod
    def informTreeWidgetChange(item) -> None: ...
    def addTopLevelItem(self, item) -> None: ...
    def addTopLevelItems(self, items) -> None: ...
    def insertTopLevelItem(self, index, item) -> None: ...
    def insertTopLevelItems(self, index, items) -> None: ...
    def takeTopLevelItem(self, index): ...
    def topLevelItems(self): ...
    def clear(self) -> None: ...
    def invisibleRootItem(self): ...
    def itemFromIndex(self, index):
        """Return the item and column corresponding to a QModelIndex.
        """
    def setColumnCount(self, c) -> None: ...

class TreeWidgetItem(QtWidgets.QTreeWidgetItem):
    """
    TreeWidgetItem that keeps track of its own widgets and expansion state.
    
      * Widgets may be added to columns before the item is added to a tree.
      * Expanded state may be set before item is added to a tree.
      * Adds setCheked and isChecked methods.
      * Adds addChildren, insertChildren, and takeChildren methods.
    """
    def __init__(self, *args) -> None: ...
    def setChecked(self, column, checked) -> None: ...
    def isChecked(self, col): ...
    def setExpanded(self, exp) -> None: ...
    def isExpanded(self): ...
    def setWidget(self, column, widget) -> None: ...
    def removeWidget(self, column) -> None: ...
    def treeWidgetChanged(self) -> None: ...
    def childItems(self): ...
    def addChild(self, child) -> None: ...
    def addChildren(self, childs) -> None: ...
    def insertChild(self, index, child) -> None: ...
    def insertChildren(self, index, childs) -> None: ...
    def removeChild(self, child) -> None: ...
    def takeChild(self, index): ...
    def takeChildren(self): ...
    def setData(self, column, role, value) -> None: ...
    def itemClicked(self, col) -> None:
        """Called when this item is clicked on.
        
        Override this method to react to user clicks.
        """

class InvisibleRootItem:
    """Wrapper around a TreeWidget's invisible root item that calls
    TreeWidget.informTreeWidgetChange when child items are added/removed.
    """
    def __init__(self, item) -> None: ...
    def addChild(self, child) -> None: ...
    def addChildren(self, childs) -> None: ...
    def insertChild(self, index, child) -> None: ...
    def insertChildren(self, index, childs) -> None: ...
    def removeChild(self, child) -> None: ...
    def takeChild(self, index): ...
    def takeChildren(self): ...
    def __getattr__(self, attr): ...
