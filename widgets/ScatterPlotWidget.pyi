from ..Qt import QtWidgets
from _typeshed import Incomplete

__all__ = ['ScatterPlotWidget']

class ScatterPlotWidget(QtWidgets.QSplitter):
    """
    This is a high-level widget for exploring relationships in tabular data.
        
    Given a multi-column record array, the widget displays a scatter plot of a
    specific subset of the data. Includes controls for selecting the columns to
    plot, filtering data, and determining symbol color and shape.
    
    The widget consists of four components:
    
    1) A list of column names from which the user may select 1 or 2 columns
       to plot. If one column is selected, the data for that column will be
       plotted in a histogram-like manner by using :func:`pseudoScatter()
       <pyqtgraph.pseudoScatter>`. If two columns are selected, then the
       scatter plot will be generated with x determined by the first column
       that was selected and y by the second.
    2) A DataFilter that allows the user to select a subset of the data by 
       specifying multiple selection criteria.
    3) A ColorMap that allows the user to determine how points are colored by
       specifying multiple criteria.
    4) A PlotWidget for displaying the data.
    """
    sigScatterPlotClicked: Incomplete
    sigScatterPlotHovered: Incomplete
    ctrlPanel: Incomplete
    fieldList: Incomplete
    ptree: Incomplete
    filter: Incomplete
    colorMap: Incomplete
    params: Incomplete
    plot: Incomplete
    filterText: Incomplete
    data: Incomplete
    indices: Incomplete
    mouseOverField: Incomplete
    scatterPlot: Incomplete
    selectionScatter: Incomplete
    selectedIndices: Incomplete
    style: Incomplete
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    fields: Incomplete
    def setFields(self, fields, mouseOverField: Incomplete | None = None) -> None:
        """
        Set the list of field names/units to be processed.
        
        The format of *fields* is the same as used by 
        :meth:`~pyqtgraph.widgets.ColorMapWidget.ColorMapParameter.setFields`
        """
    def setSelectedFields(self, *fields) -> None: ...
    filtered: Incomplete
    filteredIndices: Incomplete
    def setData(self, data) -> None:
        """
        Set the data to be processed and displayed. 
        Argument must be a numpy record array.
        """
    def setSelectedIndices(self, inds) -> None:
        """Mark the specified indices as selected.

        Must be a sequence of integers that index into the array given in setData().
        """
    def setSelectedPoints(self, points) -> None:
        """Mark the specified points as selected.

        Must be a list of points as generated by the sigScatterPlotClicked signal.
        """
    def fieldSelectionChanged(self) -> None: ...
    def filterChanged(self, f) -> None: ...
    def updatePlot(self) -> None: ...
    def updateSelected(self) -> None: ...
    def plotClicked(self, plot, points, ev) -> None: ...
    def plotHovered(self, plot, points, ev) -> None: ...
