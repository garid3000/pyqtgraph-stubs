from ..Qt import QtCore, QtGui, QtWidgets
from .GraphicsView import GraphicsView
from _typeshed import Incomplete

__all__ = ['RemoteGraphicsView']

class MouseEvent(QtGui.QMouseEvent):
    @staticmethod
    def get_state(obj, picklable: bool = False): ...
    def __init__(self, rhs) -> None: ...

class WheelEvent(QtGui.QWheelEvent):
    @staticmethod
    def get_state(obj, picklable: bool = False): ...
    def __init__(self, rhs) -> None: ...

class EnterEvent(QtGui.QEnterEvent):
    @staticmethod
    def get_state(obj): ...
    def __init__(self, rhs) -> None: ...

class LeaveEvent(QtCore.QEvent):
    @staticmethod
    def get_state(obj, picklable: bool = False): ...
    def __init__(self, rhs) -> None: ...

class RemoteGraphicsView(QtWidgets.QWidget):
    """
    Replacement for GraphicsView that does all scene management and rendering on a remote process,
    while displaying on the local widget.
    
    GraphicsItems must be created by proxy to the remote process.
    
    """
    pg: Incomplete
    shm: Incomplete
    shmFile: Incomplete
    def __init__(self, parent: Incomplete | None = None, *args, **kwds) -> None:
        """
        The keyword arguments 'useOpenGL' and 'backgound', if specified, are passed to the remote
        GraphicsView.__init__(). All other keyword arguments are passed to multiprocess.QtProcess.__init__().
        """
    def resizeEvent(self, ev): ...
    def sizeHint(self): ...
    def remoteSceneChanged(self, data) -> None: ...
    def paintEvent(self, ev) -> None: ...
    def mousePressEvent(self, ev): ...
    def mouseReleaseEvent(self, ev): ...
    def mouseMoveEvent(self, ev): ...
    def wheelEvent(self, ev): ...
    def enterEvent(self, ev): ...
    def leaveEvent(self, ev): ...
    def remoteProcess(self):
        """Return the remote process handle. (see multiprocess.remoteproxy.RemoteEventHandler)"""
    def close(self) -> None:
        """Close the remote process. After this call, the widget will no longer be updated."""

class Renderer(GraphicsView):
    sceneRendered: Incomplete
    shmFile: Incomplete
    shm: Incomplete
    img: Incomplete
    renderTimer: Incomplete
    def __init__(self, *args, **kwds) -> None: ...
    def close(self) -> None: ...
    def shmFileName(self): ...
    def update(self): ...
    def resize(self, size) -> None: ...
    def renderView(self) -> None: ...
