from ..Qt import QtWidgets
from _typeshed import Incomplete

__all__ = ['ComboBox']

class ComboBox(QtWidgets.QComboBox):
    """Extends QComboBox to add extra functionality.

      * Handles dict mappings -- user selects a text key, and the ComboBox indicates
        the selected value.
      * Requires item strings to be unique
      * Remembers selected value if list is cleared and subsequently repopulated
      * setItems() replaces the items in the ComboBox and blocks signals if the
        value ultimately does not change.
    """
    def __init__(self, parent: Incomplete | None = None, items: Incomplete | None = None, default: Incomplete | None = None) -> None: ...
    def setValue(self, value) -> None:
        """Set the selected item to the first one having the given value."""
    def setText(self, text) -> None:
        """Set the selected item to the first one having the given text."""
    def value(self):
        """
        If items were given as a list of strings, then return the currently 
        selected text. If items were given as a dict, then return the value
        corresponding to the currently selected key. If the combo list is empty,
        return None.
        """
    def ignoreIndexChange(func): ...
    def blockIfUnchanged(func): ...
    def setItems(self, items) -> None:
        """
        *items* may be a list, a tuple, or a dict. 
        If a dict is given, then the keys are used to populate the combo box
        and the values will be used for both value() and setValue().
        """
    def items(self): ...
    def updateList(self, items): ...
    def indexChanged(self, index) -> None: ...
    def setCurrentIndex(self, index) -> None: ...
    def itemsChanged(self) -> None: ...
    def insertItem(self, *args) -> None: ...
    def insertItems(self, *args) -> None: ...
    def addItem(self, *args, **kwds) -> None: ...
    def setItemValue(self, name, value) -> None: ...
    def addItems(self, items) -> None: ...
    def clear(self) -> None: ...
    def saveState(self): ...
    def restoreState(self, v) -> None: ...
    def widgetGroupInterface(self): ...
