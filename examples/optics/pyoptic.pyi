import pyqtgraph as pg
from _typeshed import Incomplete
from pyqtgraph import Point as Point
from pyqtgraph.Qt import QtCore as QtCore, QtGui as QtGui

class GlassDB:
    """
    Database of dispersion coefficients for Schott glasses
     + Corning 7980
    """
    data: Incomplete
    def __init__(self, fileName: str = 'schott_glasses.csv') -> None: ...
    def ior(self, glass, wl):
        """
        Return the index of refraction for *glass* at wavelength *wl*.
        
        The *glass* argument must be a key in self.data.
        """
    def transmissionCurve(self, glass): ...

GLASSDB: Incomplete

def wlPen(wl):
    """Return a pen representing the given wavelength"""

class ParamObj:
    def __init__(self) -> None: ...
    def __setitem__(self, item, val) -> None: ...
    def setParam(self, param, val) -> None: ...
    def setParams(self, **params) -> None:
        """Set parameters for this optic. This is a good function to override for subclasses."""
    def paramStateChanged(self) -> None: ...
    def __getitem__(self, item): ...
    def __len__(self) -> int: ...
    def getParam(self, param): ...

class Optic(pg.GraphicsObject, ParamObj):
    sigStateChanged: Incomplete
    gitem: Incomplete
    surfaces: Incomplete
    roi: Incomplete
    def __init__(self, gitem, **params) -> None: ...
    def updateTransform(self) -> None: ...
    def setParam(self, param, val) -> None: ...
    def paramStateChanged(self) -> None:
        """Some parameters of the optic have changed."""
    def roiChanged(self, *args) -> None: ...
    def boundingRect(self): ...
    def paint(self, p, *args) -> None: ...
    def ior(self, wavelength): ...

class Lens(Optic):
    def __init__(self, **params) -> None: ...
    def propagateRay(self, ray):
        """Refract, reflect, absorb, and/or scatter ray. This function may create and return new rays"""

class Mirror(Optic):
    def __init__(self, **params) -> None: ...
    def propagateRay(self, ray):
        """Refract, reflect, absorb, and/or scatter ray. This function may create and return new rays"""

class CircularSolid(pg.GraphicsObject, ParamObj):
    """GraphicsObject with two circular or flat surfaces."""
    surfaces: Incomplete
    pen: Incomplete
    brush: Incomplete
    def __init__(self, pen: Incomplete | None = None, brush: Incomplete | None = None, **opts) -> None:
        """
        Arguments for each surface are:
           x1,x2 - position of center of _physical surface_
           r1,r2 - radius of curvature
           d1,d2 - diameter of optic
        """
    def paramStateChanged(self) -> None: ...
    path: Incomplete
    def updateSurfaces(self) -> None: ...
    def boundingRect(self): ...
    def shape(self): ...
    def paint(self, p, *args) -> None: ...

class CircleSurface(pg.GraphicsObject):
    r: Incomplete
    d: Incomplete
    def __init__(self, radius: Incomplete | None = None, diameter: Incomplete | None = None) -> None:
        """center of physical surface is at 0,0
        radius is the radius of the surface. If radius is None, the surface is flat. 
        diameter is of the optic's edge."""
    def setParams(self, r, d) -> None: ...
    path: Incomplete
    h2: Incomplete
    def mkPath(self) -> None: ...
    def boundingRect(self): ...
    def paint(self, p, *args) -> None: ...
    def intersectRay(self, ray): ...

class Ray(pg.GraphicsObject, ParamObj):
    """Represents a single straight segment of a ray"""
    sigStateChanged: Incomplete
    params: Incomplete
    children: Incomplete
    def __init__(self, **params) -> None: ...
    def clearChildren(self) -> None: ...
    def paramStateChanged(self) -> None: ...
    def addChild(self, ch) -> None: ...
    def currentState(self, relativeTo: Incomplete | None = None): ...
    def setEnd(self, end) -> None: ...
    def boundingRect(self): ...
    def paint(self, p, *args) -> None: ...
    path: Incomplete
    def mkPath(self) -> None: ...

def trace(rays, optics) -> None: ...

class Tracer(QtCore.QObject):
    """
    Simple ray tracer. 
    
    Initialize with a list of rays and optics; 
    calling trace() will cause rays to be extended by propagating them through
    each optic in sequence.
    """
    optics: Incomplete
    rays: Incomplete
    def __init__(self, rays, optics) -> None: ...
    def trace(self) -> None: ...
