from ..Qt import QtCore as QtCore, QtWidgets as QtWidgets
from ..functions import SignalBlock as SignalBlock
from .stackwidget import StackWidget as StackWidget
from _typeshed import Incomplete

class ExceptionHandlerWidget(QtWidgets.QGroupBox):
    sigStackItemClicked: Incomplete
    sigStackItemDblClicked: Incomplete
    filterString: str
    def __init__(self, parent: Incomplete | None = None) -> None: ...
    def setStack(self, frame: Incomplete | None = None) -> None: ...
    def setException(self, exc: Incomplete | None = None, lastFrame: Incomplete | None = None) -> None: ...
    def selectedFrame(self): ...
    def catchAllExceptions(self, catch: bool = True) -> None:
        """
        If True, the console will catch all unhandled exceptions and display the stack
        trace. Each exception caught clears the last.
        """
    def catchNextException(self, catch: bool = True) -> None:
        """
        If True, the console will catch the next unhandled exception and display the stack
        trace.
        """
    def enableExceptionHandling(self) -> None: ...
    def disableExceptionHandling(self) -> None: ...
    def clearExceptionClicked(self) -> None: ...
    def updateSysTrace(self) -> None: ...
    def exceptionHandler(self, excInfo, lastFrame: Incomplete | None = None) -> None: ...
    inSystrace: bool
    def systrace(self, frame, event, arg): ...
    def checkException(self, excType, exc, tb): ...
    def stackItemClicked(self, item) -> None: ...
    def stackItemDblClicked(self, item) -> None: ...
